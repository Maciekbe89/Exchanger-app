{"version":3,"sources":["svg/pl.svg","svg/eu.png","svg/usa.svg","svg/gb.svg","components/Cash.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cash","props","value","cash","ratio","toFixed","className","title","style","toString","length","fontSize","flags","name","euroflag","alt","class","usaflag","gbflag","App","intervalId","state","amount","currencies","handleChange","e","setState","target","clearInterval","this","setInterval","updateData","bind","fetch","buffer","json","Object","entries","rates","map","entry","index","id","src","plflag","type","pattern","onChange","currency","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,sMCkB5BC,G,KAfF,SAAAC,GACX,IAAMC,GAASD,EAAME,KAAOF,EAAMG,OAAOC,QAAQ,GACjD,OACE,oCACE,uBAAGC,UAAU,aAAaL,EAAMM,OAChC,0BACED,UAAU,OACVE,MAAON,EAAMO,WAAWC,OAAS,EAAI,CAAEC,SAAU,QAAW,IAE3DV,EAAME,MAAQ,EAAI,GAAKD,M,mECJ1BU,EAAQ,CACZ,CACEC,KAAMC,IACNC,IAAK,cACLC,MAAO,QAET,CACEH,KAAMI,IACNF,IAAK,WACLC,MAAO,QAET,CACEH,KAAMK,IACNH,IAAK,UACLC,MAAO,SA0EIG,E,2MArEbC,WAAa,E,EAEbC,MAAQ,CACNC,OAAQ,GACRC,WAAY,I,EAqBdC,aAAe,SAAAC,GACb,EAAKC,SAAS,CACZJ,OAAQG,EAAEE,OAAOzB,S,mFAnBnB0B,cAAcC,KAAKT,YACnBS,KAAKT,WAAaU,YAAYD,KAAKE,WAAWC,KAAKH,MAAO,MAC1DA,KAAKE,WAAWC,KAAKH,KAArBA,K,qKAIqBI,MACnB,uE,cADIC,E,gBAGaA,EAAOC,O,OAApBA,E,OACNN,KAAKH,SAAS,CACZH,WAAYa,OAAOC,QAAQF,EAAKG,OAAOC,KAAI,SAACC,EAAOC,GACjD,MAAO,CAAElC,MAAOiC,EAAM,GAAIpC,MAAOoC,EAAM,GAAIE,GAAID,Q,qIAW3C,IAAD,EACwBZ,KAAKR,MAA5BC,EADD,EACCA,OAAQC,EADT,EACSA,WAChB,OACE,yBAAKjB,UAAU,aACb,yBAAKA,UAAU,UACb,uBAAGA,UAAU,QAAb,aACY,uBAAGA,UAAU,4BAEzB,yBAAKA,UAAU,UAAUqC,IAAKC,IAAQ7B,IAAI,gBAC1C,uBAAGT,UAAU,OAAb,OACA,2BACEA,UAAU,QACVuC,KAAK,SACLC,QAAQ,OACR5C,MAAOoB,EACPyB,SAAUlB,KAAKL,gBAGnB,yBAAKlB,UAAU,iBACZiB,EAAWgB,KAAI,SAAAS,GAAQ,OACtB,yBAAK1C,UAAU,WAAW2C,IAAKD,EAASN,IACtC,yBACEC,IAAK/B,EAAMoC,EAASN,IAAI7B,KACxBE,IAAKH,EAAMoC,EAASN,IAAI3B,IACxBT,UAAWM,EAAMoC,EAASN,IAAI1B,QAEhC,kBAAC,EAAD,CACEZ,MAAO4C,EAAS5C,MAChBG,MAAOyC,EAASzC,MAChBJ,KAAMmB,c,GA7DJ4B,IAAMC,WCdJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a9dcf39c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pl.562edca5.svg\";","module.exports = __webpack_public_path__ + \"static/media/eu.075aba9c.png\";","module.exports = __webpack_public_path__ + \"static/media/usa.05615112.svg\";","module.exports = __webpack_public_path__ + \"static/media/gb.d3ddd602.svg\";","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nconst Cash = props => {\r\n  const value = (props.cash * props.ratio).toFixed(2);\r\n  return (\r\n    <>\r\n      <p className=\"countries\">{props.title}</p>\r\n      <span\r\n        className=\"cash\"\r\n        style={value.toString().length > 5 ? { fontSize: \"28px\" } : {}}\r\n      >\r\n        {props.cash <= 0 ? \"\" : value}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Cash;\r\n","import React from \"react\";\nimport Cash from \"../src/components/Cash.js\";\nimport \"../src/App.css\";\nimport plflag from \"../src/svg/pl.svg\";\nimport euroflag from \"../src/svg/eu.png\";\nimport usaflag from \"../src/svg/usa.svg\";\nimport gbflag from \"../src/svg/gb.svg\";\n\nconst flags = [\n  {\n    name: euroflag,\n    alt: \"europe flag\",\n    class: \"flag\"\n  },\n  {\n    name: usaflag,\n    alt: \"usa flag\",\n    class: \"flag\"\n  },\n  {\n    name: gbflag,\n    alt: \"gb flag\",\n    class: \"flag\"\n  }\n];\n\nclass App extends React.Component {\n  intervalId = 0;\n\n  state = {\n    amount: \"\",\n    currencies: []\n  };\n\n  componentDidMount() {\n    clearInterval(this.intervalId);\n    this.intervalId = setInterval(this.updateData.bind(this), 15000);\n    this.updateData.bind(this)();\n  }\n\n  async updateData() {\n    const buffer = await fetch(\n      \"https://api.exchangeratesapi.io/latest?symbols=EUR,USD,GBP&base=PLN\"\n    );\n    const json = await buffer.json();\n    this.setState({\n      currencies: Object.entries(json.rates).map((entry, index) => {\n        return { title: entry[0], ratio: entry[1], id: index };\n      })\n    });\n  }\n\n  handleChange = e => {\n    this.setState({\n      amount: e.target.value\n    });\n  };\n\n  render() {\n    const { amount, currencies } = this.state;\n    return (\n      <div className=\"container\">\n        <div className=\"header\">\n          <p className=\"logo\">\n            Exchanger <i className=\"fas fa-comments-dollar\"></i>\n          </p>\n          <img className=\"pl-flag\" src={plflag} alt=\"poland flag\" />\n          <p className=\"pln\">PLN</p>\n          <input\n            className=\"input\"\n            type=\"number\"\n            pattern=\"\\d*\"\n            value={amount}\n            onChange={this.handleChange}\n          />\n        </div>\n        <div className=\"cta-container\">\n          {currencies.map(currency => (\n            <div className=\"currency\" key={currency.id}>\n              <img\n                src={flags[currency.id].name}\n                alt={flags[currency.id].alt}\n                className={flags[currency.id].class}\n              />\n              <Cash\n                ratio={currency.ratio}\n                title={currency.title}\n                cash={amount}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"../src/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}